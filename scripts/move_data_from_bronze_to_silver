-- TRANSFERING AND TRANSFORMING DATA FROM BRONZE TO SILVER LAYER

INSERT INTO silver.crm_cust_info (
[cst_id]
,[cst_key]
,[cst_firstname]
,[cst_lastname]
,[cst_marital_status]
,[cst_gndr]
,[cst_create_date]
)

SELECT 
[cst_id]
,[cst_key]
,TRIM([cst_firstname]) [cst_firstname]      -- Data cleansing
,TRIM([cst_lastname]) [cst_lastname]        -- Data cleansing
,CASE WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married' 
      WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single' 
      ELSE 'n/a'
 END cst_marital_status                     -- Data normalization or standartization
,CASE WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN ' Male' 
      WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN ' Female' 
      ELSE 'n/a'
 END [cst_gndr]                             -- Data normalization or standartization
,[cst_create_date] 

FROM(
    SELECT *
    ,ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) ranked_row
    FROM bronze.crm_cust_info
    WHERE cst_id is not null
) a
WHERE ranked_row = 1                        -- Keeping only the most recent record per customer


/***************************************************************

CLEASING DATA QUERIES - CHECKS ON SILVER LAYER


-- Check for nulls or duplicates on ID column (expected no results)
SELECT cst_id, COUNT(cst_id)
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(cst_id) != 1 OR cst_id IS NULL


-- Check for spaces before or after words (expected no results)
SELECT cst_firstname, cst_lastname
FROM silver.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname)
OR	  cst_lastname != TRIM(cst_lastname)

-- Data Standartization and Consistency
SELECT DISTINCT cst_marital_status
FROM silver.crm_cust_info

SELECT DISTINCT cst_gndr
FROM silver.crm_cust_info

/***************************************************************
