/************************************************************************
****  TRANSFERING AND TRANSFORMING DATA FROM BRONZE TO SILVER LAYER  ****

/******** TABLE crm_cust_info ********/

INSERT INTO silver.crm_cust_info (
[cst_id]
,[cst_key]
,[cst_firstname]
,[cst_lastname]
,[cst_marital_status]
,[cst_gndr]
,[cst_create_date]
)

SELECT 
[cst_id]
,[cst_key]
,TRIM([cst_firstname]) [cst_firstname]      				-- Data cleansing
,TRIM([cst_lastname]) [cst_lastname]        				-- Data cleansing
,CASE WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married' 
      WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single' 
      ELSE 'n/a'
 END cst_marital_status                     				-- Data normalization or standartization
,CASE WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN ' Male' 
      WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN ' Female' 
      ELSE 'n/a'
 END [cst_gndr]                             				-- Data normalization or standartization
,[cst_create_date] 

FROM(
    SELECT *
    ,ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) ranked_row
    FROM bronze.crm_cust_info
    WHERE cst_id is not null
) a
WHERE ranked_row = 1                        -- Keeping only the most recent record per customer


/******** TABLE crm_prd_info ********/

INSERT INTO silver.crm_prd_info (
[prd_id]
,[cat_id]
,[prd_key]
,[prd_nm]
,[prd_cost]
,[prd_line]
,[prd_start_dt]
,[prd_end_dt]
)


SELECT 
[prd_id]
,REPLACE(SUBSTRING([prd_key],1,5), '-', '_') as cat_id		-- Derived Column: extract Category ID
,SUBSTRING([prd_key],7,LEN(prd_key)) as prd_key			-- Derived Column: extract Product Key
,[prd_nm]
,ISNULL([prd_cost],0) as [prd_cost]				-- Handling missing information
,CASE UPPER(TRIM([prd_line])) 
	  WHEN 'R' THEN 'Road'
	  WHEN 'S' THEN 'Other Sales'
	  WHEN 'M' THEN 'Mountain'
	  WHEN 'T' THEN 'Touring'
	  ELSE 'n/a' 
END as [prd_line]						-- Normalization and handling missing data a 	
,CAST([prd_start_dt] AS DATE) AS [prd_start_dt]			-- Data type casting
,CAST(DATEADD(day, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) AS DATE) AS prd_end_dt  -- Data Enrichment: adding new relevant data to the DS - calculating end date as one day before next start date
FROM [DataWarehouse].[bronze].[crm_prd_info]
ORDER BY 1


/******** TABLE crm_sales_details ********/

>> LISTA DE PROBLEMAS ENCONTRADOS E TRATADOS
[sls_order_dt] 
campos a 0, len()>8 ou datas inexistentes
Resolução: clientes disseram que vão lidar com o erro a nível de sistema, então não iremos tratálos, apenas deixá-los a NULL

[sls_sales]
valores nulos, negativos, que não representam a multiplicação entre qtt e price
Resolução: inferir valores corretos

[sls_price]
valores nulos, negativos, que não representam a divisão entre sales e qtt
Resolução: inferir valores corretos
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

INSERT INTO [DataWarehouse].[silver].[crm_sales_details](
[sls_ord_num]
,[sls_prd_key]
,[sls_cust_id]
,[sls_order_dt]
,[sls_ship_dt]
,[sls_due_dt]
,[sls_sales]
,[sls_quantity]
,[sls_price]
)
SELECT [sls_ord_num]
,[sls_prd_key]
,[sls_cust_id]
,CASE 
	WHEN [sls_order_dt]=0 OR LEN([sls_order_dt])!=8 THEN NULL
	ELSE CAST(CAST([sls_order_dt] AS VARCHAR) AS DATE)
END AS [sls_order_dt]
,CASE 
	WHEN [sls_ship_dt]=0 OR LEN([sls_ship_dt])!=8 THEN NULL
	ELSE CAST(CAST([sls_ship_dt] AS VARCHAR) AS DATE)
END AS [sls_ship_dt]
,CASE 
	WHEN [sls_due_dt]=0 OR LEN([sls_due_dt])!=8 THEN NULL
	ELSE CAST(CAST([sls_due_dt] AS VARCHAR) AS DATE)
END AS [sls_due_dt]
,CASE 
	WHEN [sls_sales]<=0 OR [sls_sales] IS NULL OR [sls_sales]!=ABS([sls_price])*sls_quantity 
		THEN ABS(sls_price)*sls_quantity
	ELSE [sls_sales]
END	AS [sls_sales]
,[sls_quantity]
,CASE 
	WHEN [sls_price]<=0 OR [sls_price] IS NULL OR [sls_price]!=ABS([sls_sales])/sls_quantity 
		THEN ABS([sls_sales])/sls_quantity
	ELSE [sls_price]
END	AS [sls_price]
FROM [DataWarehouse].[bronze].[crm_sales_details]


/*********************************************************
****  CLEASING DATA QUERIES - CHECKS ON SILVER LAYER  ****

-- Check for nulls or duplicates on ID column (expected no results)
SELECT cst_id, COUNT(cst_id)
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(cst_id) != 1 OR cst_id IS NULL

-- Check for spaces before or after words (expected no results)
SELECT cst_firstname, cst_lastname
FROM silver.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname)
OR	  cst_lastname != TRIM(cst_lastname)

-- Data Standartization and Consistency
SELECT DISTINCT cst_marital_status
FROM silver.crm_cust_info

-- Check for invalid date
SELECT * 
FROM bronze.crm_prd_info
WHERE prd_start_dt > prd_end_dt
or [prd_start_dt]>20500101 OR [prd_start_dt]<20000101

/***************************************************************
